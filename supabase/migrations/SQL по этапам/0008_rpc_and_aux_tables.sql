-- =============================================================
-- 0008_rpc_and_aux_tables.sql
-- RPC-функции (организации, приглашения) + RAG/чатбот таблицы и функции.
-- =============================================================

-- RPC: список участников с email
create or replace function public.get_organization_members(p_organization_id uuid)
returns table (
  member_id bigint,
  user_id uuid,
  organization_id uuid,
  role text,
  email text
)
language plpgsql
security definer
as $$
begin
    if not public.is_member_of(p_organization_id, auth.uid()) then
        raise exception 'Access denied: You are not a member of this organization.';
    end if;

    return query
    select
        om.id as member_id,
        om.user_id,
        om.organization_id,
        om.role,
        u.email::text as email
    from public.organization_members om
    join auth.users u on om.user_id = u.id
    where om.organization_id = p_organization_id
    order by u.email;
end;
$$;

-- RPC: приглашение по email
create or replace function public.invite_user_to_organization(p_organization_id uuid, p_invitee_email text)
returns void language plpgsql security definer as $$
declare
    v_invitee_user_id uuid;
begin
    select id into v_invitee_user_id from auth.users where email = p_invitee_email;

    if v_invitee_user_id is null then
        raise exception 'User with email % not found. Please ask them to sign up first.', p_invitee_email;
    end if;

    insert into public.organization_members (organization_id, user_id, role)
    values (p_organization_id, v_invitee_user_id, 'member');
end;
$$;

-- RPC: создать организацию и добавить создателя
create or replace function public.create_organization_and_add_creator(p_org_name text)
returns uuid language plpgsql security invoker as $$
declare
    v_org_id uuid;
    v_user_id uuid := auth.uid();
begin
    insert into public.organizations (name) values (p_org_name)
    returning id into v_org_id;

    insert into public.organization_members (organization_id, user_id, role)
    values (v_org_id, v_user_id, 'member');

    return v_org_id;
end;
$$;

-- Таблицы для RAG/чатбота
create table if not exists public.documents (
  id bigserial primary key,
  content text,
  metadata jsonb,
  embedding vector(1024)
);

-- Поиск ближайших документов по эмбеддингам
create or replace function public.match_documents (query_embedding vector(1024), match_count int default null, filter jsonb default '{}')
returns table (id bigint, content text, metadata jsonb, similarity float)
language sql as $$
  select d.id, d.content, d.metadata, 1 - (d.embedding <=> query_embedding) as similarity
  from public.documents d
  where d.metadata @> filter
  order by d.embedding <=> query_embedding
  limit match_count;
$$;

-- Журналы чат-интеграций
create table if not exists public.usersbot (
  user_id bigint primary key,
  user_name text,
  user_pass text,
  user_secret text,
  user_format text,
  is_subscribed boolean default false
);

create table if not exists public.n8n_chat_histories (
  id bigint generated by default as identity primary key,
  session_id varchar not null,
  message jsonb not null
);
