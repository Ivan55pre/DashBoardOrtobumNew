-- 1. Extensions
create extension if not exists vector;

-- 2. Table Definitions

-- Organizations table
create table public.organizations (
  id uuid primary key default gen_random_uuid (),
  name text not null unique,
  external_id text unique
);

-- Table for linking users and organizations
create table public.organization_members (
  id bigint generated by default as identity primary key,
  user_id uuid not null references auth.users (id) on delete cascade,
  organization_id uuid not null references public.organizations (id) on delete cascade,
  role text not null check (role in ('admin', 'member')),
  created_at timestamptz default now(),
  unique (user_id, organization_id)
);

-- Report Metadata Table
create table public.report_metadata (
  id uuid primary key default gen_random_uuid(),
  organization_id uuid not null references public.organizations (id) on delete cascade,
  report_type text not null,
  report_date date not null,
  created_at timestamp default now(),
  updated_at timestamp,
  unique (organization_id, report_type, report_date)
);

-- Cash & Bank Report Items Table
create table public.cash_bank_report_items (
  id uuid primary key default gen_random_uuid(),
  report_id uuid not null references public.report_metadata (id) on delete cascade,
  subconto text,
  account_name text not null,
  balance_start decimal(15, 2),
  income_amount decimal(15, 2),
  expense_amount decimal(15, 2),
  balance_current decimal(15, 2),
  account_type text check (account_type in ('bank', 'cash', 'total')),
  level integer,
  currency text not null,
  is_total_row boolean default false,
  created_at timestamptz default now() not null,
  -- Hierarchy columns
  parent_id uuid references public.cash_bank_report_items (id) on delete set null,
  account_id text,
  parent_account_id text
);

-- Inventory Turnover Report Items Table
create table public.inventory_turnover_report_items (
  id uuid primary key default gen_random_uuid(),
  report_id uuid not null references public.report_metadata (id) on delete cascade,
  category_name text not null,
  parent_category_id uuid references public.inventory_turnover_report_items (id) on delete set null,
  quantity_pairs integer,
  balance_rub decimal(15, 2),
  dynamics_start_month_rub decimal(15, 2),
  dynamics_start_month_percent decimal(5, 2),
  dynamics_start_year_rub decimal(15, 2),
  dynamics_start_year_percent decimal(5, 2),
  turnover_days integer,
  level integer
);

-- Debt reports items table
create table public.debt_reports_items (
  id uuid primary key default gen_random_uuid (),
  report_id uuid references public.report_metadata (id) on delete cascade,
  debt_amount numeric not null,
  overdue_amount numeric not null,
  credit_amount numeric not null,
  is_total_row boolean not null,
  client_name text not null,
  parent_client_id uuid references public.debt_reports_items (id) on delete set null,
  created_at timestamptz default now(),
  level int
);

-- Plan-fact reports items table
create table public.plan_fact_reports_items (
  id uuid primary key default gen_random_uuid (),
  report_id uuid references public.report_metadata (id) on delete cascade,
  plan_amount numeric not null,
  fact_amount numeric not null,
  execution_percent numeric not null,
  is_total_row boolean not null,
  created_at timestamptz default now() not null,
  -- Hierarchy and metadata columns
  category_name text,
  parent_id uuid references public.plan_fact_reports_items (id) on delete set null,
  period_type text,
  level integer,
  is_expandable boolean
);

-- Summary Tables
create table public.cash_bank_monthly_summaries (
  organization_id uuid not null references public.organizations (id) on delete cascade,
  year integer not null check (year between 1900 and 2100),
  month integer not null check (month between 1 and 12),
  account_type text not null,
  avg_balance decimal(15, 2),
  total_income decimal(15, 2),
  total_expense decimal(15, 2),
  primary key (organization_id, year, month, account_type)
);

create table public.inventory_monthly_summaries (
  organization_id uuid not null references public.organizations (id) on delete cascade,
  year integer not null,
  month integer not null,
  category_path text,
  avg_balance_rub decimal(15, 2),
  avg_turnover_days integer,
  primary key (organization_id, year, month, category_path)
);

create table public.debt_monthly_summaries (
  organization_id uuid references public.organizations (id) on delete cascade,
  year int not null,
  month int not null,
  client_name text not null,
  total_debt numeric not null,
  total_overdue numeric not null,
  total_credit numeric not null,
  primary key (organization_id, year, month, client_name)
);

create table public.plan_fact_monthly_summaries (
  organization_id uuid references public.organizations (id) on delete cascade,
  year int not null,
  month int not null,
  category_name text not null,
  total_plan numeric not null,
  total_fact numeric not null,
  execution_percent numeric not null,
  primary key (organization_id, year, month, category_name)
);

-- 3. Indexes
create index idx_debt_reports_items_report_id on public.debt_reports_items using btree (report_id);
create index idx_debt_reports_items_client_name on public.debt_reports_items using btree (client_name);
create index idx_debt_reports_items_parent_client_id on public.debt_reports_items using btree (parent_client_id);
create index idx_debt_reports_items_level on public.debt_reports_items using btree (level);

-- 4. Helper Functions for RLS

create or replace function public.is_member_of(p_organization_id uuid, p_user_id uuid)
returns boolean language sql security definer stable as $$
  select exists (
    select 1 from public.organization_members om
    where om.organization_id = p_organization_id and om.user_id = p_user_id
  );
$$;

create or replace function public.is_admin_of(p_organization_id uuid, p_user_id uuid)
returns boolean language sql security definer stable as $$
  select exists (
    select 1 from public.organization_members om
    where om.organization_id = p_organization_id and om.user_id = p_user_id and om.role = 'admin'
  );
$$;

create or replace function public.is_organization_empty(p_organization_id uuid)
returns boolean language sql security definer stable as $$
  select not exists (select 1 from public.organization_members om where om.organization_id = p_organization_id);
$$;

create or replace function public.is_last_admin_in_organization(p_organization_id uuid, p_user_id uuid)
returns boolean language plpgsql security definer as $$
declare
    admin_count integer;
    is_user_an_admin boolean;
begin
    select exists (
        select 1 from public.organization_members om
        where om.organization_id = p_organization_id and om.user_id = p_user_id and om.role = 'admin'
    ) into is_user_an_admin;

    if not is_user_an_admin then
        return false;
    end if;

    select count(*) into admin_count from public.organization_members om
    where om.organization_id = p_organization_id and om.role = 'admin';

    return admin_count = 1;
end;
$$;

-- 5. Row Level Security (RLS) Policies

-- RLS for organization_members
alter table public.organization_members enable row level security;

create policy "Users can view their own membership record."
on public.organization_members for select
using (user_id = auth.uid());

create policy "Admins can add members; users can join a new org."
on public.organization_members for insert
with check (
  (public.is_admin_of(organization_members.organization_id, auth.uid())) or
  (organization_members.user_id = auth.uid() and public.is_organization_empty(organization_members.organization_id))
);

create policy "Admins can update member roles in their organization."
on public.organization_members for update
using (public.is_admin_of(organization_id, auth.uid()))
with check (
  -- The user must be an admin (checked in USING clause).
  -- This check prevents demoting or moving the last admin.
  (not public.is_last_admin_in_organization(old.organization_id, old.user_id))
  or (role = 'admin' and organization_id = old.organization_id)
);

create policy "Admins can remove members, and users can remove themselves."
on public.organization_members for delete
using (
  (public.is_admin_of(organization_members.organization_id, auth.uid()) or (organization_members.user_id = auth.uid())) and
  (not public.is_last_admin_in_organization(organization_members.organization_id, organization_members.user_id))
);

-- RLS for report_metadata
alter table public.report_metadata enable row level security;
create policy "Allow members to read their organization's report metadata" on public.report_metadata for select using (public.is_member_of(report_metadata.organization_id, auth.uid()));
create policy "Allow admins to manage report metadata" on public.report_metadata for all with check (public.is_admin_of(report_metadata.organization_id, auth.uid()));

-- RLS for report item tables
alter table public.cash_bank_report_items enable row level security;
create policy "Allow members to read cash/bank items" on public.cash_bank_report_items for select using (exists (select 1 from public.report_metadata rm where rm.id = cash_bank_report_items.report_id and public.is_member_of(rm.organization_id, auth.uid())));
create policy "Allow admins to manage cash/bank items" on public.cash_bank_report_items for all with check (exists (select 1 from public.report_metadata rm where rm.id = cash_bank_report_items.report_id and public.is_admin_of(rm.organization_id, auth.uid())));

alter table public.inventory_turnover_report_items enable row level security;
create policy "Allow members to read inventory items" on public.inventory_turnover_report_items for select using (exists (select 1 from public.report_metadata rm where rm.id = inventory_turnover_report_items.report_id and public.is_member_of(rm.organization_id, auth.uid())));
create policy "Allow admins to manage inventory items" on public.inventory_turnover_report_items for all with check (exists (select 1 from public.report_metadata rm where rm.id = inventory_turnover_report_items.report_id and public.is_admin_of(rm.organization_id, auth.uid())));

alter table public.plan_fact_reports_items enable row level security;
create policy "Allow members to read plan-fact items" on public.plan_fact_reports_items for select using (exists (select 1 from public.report_metadata rm where rm.id = plan_fact_reports_items.report_id and public.is_member_of(rm.organization_id, auth.uid())));
create policy "Allow admins to manage plan-fact items" on public.plan_fact_reports_items for all with check (exists (select 1 from public.report_metadata rm where rm.id = plan_fact_reports_items.report_id and public.is_admin_of(rm.organization_id, auth.uid())));

alter table public.debt_reports_items enable row level security;
create policy "Allow members to read debt items" on public.debt_reports_items for select using (exists (select 1 from public.report_metadata rm where rm.id = debt_reports_items.report_id and public.is_member_of(rm.organization_id, auth.uid())));
create policy "Allow admins to manage debt items" on public.debt_reports_items for all with check (exists (select 1 from public.report_metadata rm where rm.id = debt_reports_items.report_id and public.is_admin_of(rm.organization_id, auth.uid())));

-- RLS for summary tables
alter table public.cash_bank_monthly_summaries enable row level security;
create policy "Allow members to read monthly summaries" on public.cash_bank_monthly_summaries for select using (public.is_member_of(organization_id, auth.uid()));

alter table public.inventory_monthly_summaries enable row level security;
create policy "Allow members to read inventory summaries" on public.inventory_monthly_summaries for select using (public.is_member_of(organization_id, auth.uid()));
-- The "manage" policy for inventory_monthly_summaries was removed to make all summary tables consistently
-- read-only for API users, assuming they are populated by a trusted backend process.

alter table public.debt_monthly_summaries enable row level security;
create policy "Allow members to read debt summaries" on public.debt_monthly_summaries for select using (public.is_member_of(organization_id, auth.uid()));

alter table public.plan_fact_monthly_summaries enable row level security;
create policy "Allow members to read plan-fact summaries" on public.plan_fact_monthly_summaries for select using (public.is_member_of(organization_id, auth.uid()));

-- 6. Triggers and Trigger Functions

create or replace function public.set_first_member_as_admin()
returns trigger language plpgsql security definer as $$
begin
    if (select count(*) from public.organization_members where organization_id = new.organization_id) = 1 then
        update public.organization_members set role = 'admin' where id = new.id;
    end if;
    return new;
end;
$$;

create trigger on_new_member_set_admin_role
after insert on public.organization_members
for each row execute function public.set_first_member_as_admin();

create or replace function public.update_report_metadata_timestamp()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

create trigger update_report_metadata_timestamp
before update on public.report_metadata
for each row execute function public.update_report_metadata_timestamp();

-- 7. Application RPC Functions

create or replace function public.get_organization_members(p_organization_id uuid)
returns table (
member_id bigint, 
user_id uuid, 
organization_id uuid, 
role text, 
email text
)
language plpgsql 
security definer 
as $$
begin
    if not public.is_member_of(p_organization_id, auth.uid()) then
        raise exception 'Access denied: You are not a member of this organization.';
    end if;

    return query
    select
        om.id as member_id,
        om.user_id,
        om.organization_id,
        om.role,
        u.email::text as email
    from public.organization_members om
    join auth.users u on om.user_id = u.id
    where om.organization_id = p_organization_id
    order by u.email;
end;
$$;

create or replace function public.invite_user_to_organization(p_organization_id uuid, p_invitee_email text)
returns void language plpgsql security invoker as $$
declare
    v_invitee_user_id uuid;
begin
    select id into v_invitee_user_id from auth.users where email = p_invitee_email;

    if v_invitee_user_id is null then
        raise exception 'User with email % not found. Please ask them to sign up first.', p_invitee_email;
    end if;

    insert into public.organization_members (organization_id, user_id, role)
    values (p_organization_id, v_invitee_user_id, 'member');
end;
$$;

create or replace function public.create_organization_and_add_creator(p_org_name text)
returns uuid language plpgsql security invoker as $$
declare
    v_org_id uuid;
    v_user_id uuid := auth.uid();
begin
    insert into public.organizations (name) values (p_org_name)
    returning id into v_org_id;

    insert into public.organization_members (organization_id, user_id, role)
    values (v_org_id, v_user_id, 'member');

    return v_org_id;
end;
$$;

-- Upsert function for Cash & Bank reports
create or replace function public.upsert_cash_bank_report(p_organization_name text, p_report_date date, p_report_items jsonb)
returns uuid language plpgsql security definer as $$
declare
    v_organization_id uuid;
    v_report_id uuid;
    item jsonb;
    v_item_id uuid;
    v_parent_id uuid;
begin
    insert into public.organizations (name) values (p_organization_name)
    on conflict (name) do update set name = excluded.name
    returning id into v_organization_id;

    insert into public.report_metadata (organization_id, report_type, report_date, updated_at)
    values (v_organization_id, 'cash_bank', p_report_date, now())
    on conflict (organization_id, report_type, report_date) do update set updated_at = now()
    returning id into v_report_id;

    delete from public.cash_bank_report_items where report_id = v_report_id;

    create temp table temp_id_map (account_id text primary key, item_id uuid not null) on commit drop;

    for item in select * from jsonb_array_elements(p_report_items) loop
        insert into public.cash_bank_report_items (
            report_id, account_id, parent_account_id, account_name, subconto,
            balance_start, income_amount, expense_amount, balance_current,
            account_type, level, currency, is_total_row, parent_id
        ) values (
            v_report_id, item->>'account_id', item->>'parent_account_id', item->>'account_name', item->>'subconto',
            (item->>'balance_start')::decimal(15,2), (item->>'income_amount')::decimal(15,2),
            (item->>'expense_amount')::decimal(15,2), (item->>'balance_current')::decimal(15,2),
            item->>'account_type', (item->>'level')::integer, item->>'currency', (item->>'is_total_row')::boolean, null
        ) returning id into v_item_id;

        if item->>'account_id' is not null and trim(item->>'account_id') != '' then
            insert into temp_id_map (account_id, item_id)
            values (item->>'account_id', v_item_id)
            on conflict (account_id) do nothing;
        end if;
    end loop;

    for item in select * from jsonb_array_elements(p_report_items) loop
        if item->>'parent_account_id' is not null and trim(item->>'parent_account_id') != '' then
            select item_id into v_parent_id from temp_id_map where account_id = item->>'parent_account_id';
            if v_parent_id is not null then
                update public.cash_bank_report_items set parent_id = v_parent_id
                where report_id = v_report_id and account_id = item->>'account_id';
            end if;
        end if;
    end loop;

    return v_report_id;
end;
$$;

-- Upsert function for Inventory Turnover reports
create or replace function public.upsert_inventory_turnover_report(p_organization_name text, p_report_date date, p_report_items jsonb)
returns uuid language plpgsql security definer as $$
declare
    v_organization_id uuid;
    v_report_id uuid;
    item jsonb;
    v_item_id uuid;
    v_parent_id uuid;
begin
    insert into public.organizations (name) values (p_organization_name)
    on conflict (name) do update set name = excluded.name
    returning id into v_organization_id;

    insert into public.report_metadata (organization_id, report_type, report_date, updated_at)
    values (v_organization_id, 'inventory_turnover', p_report_date, now())
    on conflict (organization_id, report_type, report_date) do update set updated_at = now()
    returning id into v_report_id;

    delete from public.inventory_turnover_report_items where report_id = v_report_id;

    create temp table temp_category_map (category_name text primary key, item_id uuid not null) on commit drop;

    for item in select * from jsonb_array_elements(p_report_items) loop
        insert into public.inventory_turnover_report_items (
            report_id, category_name, quantity_pairs, balance_rub, dynamics_start_month_rub,
            dynamics_start_month_percent, dynamics_start_year_rub, dynamics_start_year_percent,
            turnover_days, level
        ) values (
            v_report_id, item->>'category_name', (item->>'quantity_pairs')::integer, (item->>'balance_rub')::decimal,
            (item->>'dynamics_start_month_rub')::decimal, (item->>'dynamics_start_month_percent')::decimal,
            (item->>'dynamics_start_year_rub')::decimal, (item->>'dynamics_start_year_percent')::decimal,
            (item->>'turnover_days')::integer, (item->>'level')::integer
        ) returning id into v_item_id;

        insert into temp_category_map (category_name, item_id) values (item->>'category_name', v_item_id);
    end loop;

    for item in select * from jsonb_array_elements(p_report_items) loop
        if item->>'parent_category_name' is not null and item->>'parent_category_name' != '' then
            select item_id into v_parent_id from temp_category_map where category_name = item->>'parent_category_name';
            if v_parent_id is not null then
                update public.inventory_turnover_report_items set parent_category_id = v_parent_id
                where report_id = v_report_id and category_name = item->>'category_name';
            end if;
        end if;
    end loop;

    return v_report_id;
end;
$$;

-- Upsert function for Plan-Fact reports
create or replace function public.upsert_plan_fact_report(p_organization_name text, p_report_date date, p_report_items jsonb)
returns uuid language plpgsql security definer as $$
declare
    v_organization_id uuid;
    v_report_id uuid;
    item jsonb;
    v_item_id uuid;
    v_parent_id uuid;
begin
    insert into public.organizations (name) values (p_organization_name)
    on conflict (name) do update set name = excluded.name
    returning id into v_organization_id;

    insert into public.report_metadata (organization_id, report_type, report_date, updated_at)
    values (v_organization_id, 'plan_fact', p_report_date, now())
    on conflict (organization_id, report_type, report_date) do update set updated_at = now()
    returning id into v_report_id;

    delete from public.plan_fact_reports_items where report_id = v_report_id;

    create temp table temp_category_map (category_name text primary key, item_id uuid not null) on commit drop;

    for item in select * from jsonb_array_elements(p_report_items) loop
        insert into public.plan_fact_reports_items (
            report_id, category_name, plan_amount, fact_amount, execution_percent,
            is_total_row, period_type, level, is_expandable
        ) values (
            v_report_id, item->>'category_name', (item->>'plan_amount')::decimal, (item->>'fact_amount')::decimal,
            (item->>'execution_percent')::decimal, (item->>'is_total_row')::boolean, item->>'period_type',
            (item->>'level')::integer, (item->>'is_expandable')::boolean
        ) returning id into v_item_id;

        insert into temp_category_map (category_name, item_id) values (item->>'category_name', v_item_id);
    end loop;

    for item in select * from jsonb_array_elements(p_report_items) loop
        if item->>'parent_category_name' is not null and item->>'parent_category_name' != '' then
            select item_id into v_parent_id from temp_category_map where category_name = item->>'parent_category_name';
            if v_parent_id is not null then
                update public.plan_fact_reports_items set parent_id = v_parent_id
                where report_id = v_report_id and category_name = item->>'category_name';
            end if;
        end if;
    end loop;

    return v_report_id;
end;
$$;

-- 8. Auxiliary Feature Tables (RAG, Chatbot)

-- RAG (Retrieval-Augmented Generation)
create table if not exists public.documents (
  id bigserial primary key,
  content text,
  metadata jsonb,
  embedding vector(1024)
);

create or replace function public.match_documents (query_embedding vector(1024), match_count int default null, filter jsonb default '{}')
returns table (id bigint, content text, metadata jsonb, similarity float)
language sql as $$
  select d.id, d.content, d.metadata, 1 - (d.embedding <=> query_embedding) as similarity
  from public.documents d
  where d.metadata @> filter
  order by d.embedding <=> query_embedding
  limit match_count;
$$;

-- Chatbot
create table if not exists public.usersbot (
  user_id bigint primary key,
  user_name text,
  user_pass text,
  user_secret text,
  user_format text,
  is_subscribed boolean default false
);

create table if not exists public.n8n_chat_histories (
  id bigint generated by default as identity primary key,
  session_id varchar not null,
  message jsonb not null
);